Week 1:
    Homework 1:
        C:\PRAGADHE\DEV_GIT\LearnJava\JavaPractice\MongoDB\MongoDB_M101J\hw1-1__m101j>mongorestore dump
        MongoDB Enterprise > use m101
        switched to db m101
        MongoDB Enterprise > db.hw1.findOne()
        {
                "_id" : ObjectId("50773061bf44c220307d8514"),
                "answer" : 42,
                "question" : "The Ultimate Question of Life, The Universe and Everything"
        }

    Homework 2:
        Valid JSON object

    Homework 3:
        523258

Week 2:
    Homework 2.1:
        MVN Commands:
        mvn compile exec:java -Dexec.mainClass=course.homework.MongoDBSparkFreemarkerStyle

    Homework 2.2:
        Importing JSON / BSON to mongodb:
        mongoimport --drop -d students -c grades grades.json

        This next query, which uses the aggregation framework that we have not taught yet, will tell you the student_id with the highest average score:
            > db.grades.aggregate( { '$group' : { '_id' : '$student_id', 'average' : { $avg : '$score' } } }, { '$sort' : { 'average' : -1 } }, { '$limit' : 1 } )

        SOLUTION:
            Find all exam scores greater than or equal to 65, and sort those scores from lowest to highest.
            What is the student_id of the lowest exam score above 65?
            > db.grades.aggregate({$match:{'type':"exam", 'score':{$gte:65}}, },{'$group':{'_id':'$student_id', 'scores':{$sum:'$score'}}}, {'$sort':{'scores':1}}, {'$limit':1});

            db.grades.aggregate(
                {
                    $match : {
                        'type' : "exam",
                        'score' : {$gte : 65}
                    },
                },
                {
                    '$group' : {
                        '_id' : '$student_id',
                        'scores':{$sum : '$score'}
                    }
                },
                {
                    '$sort' : {'scores' : 1}
                },
                {
                    '$limit' : 1
                }
            );

            { "_id" : 22, "scores" : 65.02518811936324 }

    Homework 2.3:
        Now let us find the student who holds the 101st best grade across all grades
            > db.grades.find().sort( { 'score' : -1 } ).skip( 100 ).limit( 1 )

        Now let us sort the students by student_id , and score, while also displaying the type to then see what the top five docs are
            > db.grades.find( { }, { 'student_id' : 1, 'type' : 1, 'score' : 1, '_id' : 0 } ).sort( { 'student_id' : 1, 'score' : 1, } ).limit( 5 )

        SOLUTION:
        Problem solved using Eclipse
        - Provide the identity of the student with the highest average in the class with following query that uses the aggregation framework
            db.grades.aggregate( { '$group' : { '_id' : '$student_id', 'average' : { $avg : '$score' } } }, { '$sort' : { 'average' : -1 } }, { '$limit' : 1 } )

    Homework 2.4:
        mvn compile exec:java -Dexec.mainClass=course.BlogController

    Homework 2.5:
        mongoimport --drop -d movies -c movieDetails movieDetails.json

        SOLUTION:
        > db.movieDetails.find( { "year" : 2013 , "rated" : "PG-13", "awards.wins" : 0} ).pretty()
        "A Decade of Decadence, Pt. 2: Legacy of Dreams"

    Homework 2.6:
        SOLUTION:
        Find Documents that have Sweden as the 2nd country
        > db.movieDetails.count( { "countries" : { $size : 2}, "countries.1" : "Sweden"} )

        Find Documents that have JUST two countries and has Sweden as 2nd element in Countries
        > db.movieDetails.find( { "countries" : { $size : 2}, "countries.1" : "Sweden"} )

Week 3:
    Homework 3.1:
    http://stackoverflow.com/questions/14788317/removing-the-minimum-element-of-a-particular-attribute-type-in-mongodb
    http://stackoverflow.com/questions/13335009/mongodb-find-the-minimum-element-in-array-and-delete-it

        Provide the identity (in the form of their _id) of the student with the highest average in the class with following query that uses the aggregation framework.
        The answer will appear in the _id field of the resulting document.

db.students.aggregate( [
  { '$unwind': '$scores' },
  {
    '$group':
    {
      '_id': '$_id',
      'average': { $avg: '$scores.score' }
    }
  },
  { '$sort': { 'average' : -1 } },
  { '$limit': 1 }
] )

        SOULTION:
        The following will display only homework fields
        > db.marks.find({}, {"scores":{$slice:-2}})

        The following will get the Minimum Homework from each student id
            myResult = db.students.aggregate ( [
            {
                "$unwind" : "$scores"
            },
            {
                "$match" : 
                {
                    "scores.type" : "homework"
                }
            },
            {
                "$group" : 
                {
                    "_id" : "$_id",
                    "minHomework" :
                    {
                        "$min" : "$scores.score"
                    }
                }
            }
            ] );

        UPDATE the database collection by removing the minimum homework
            // Working Solution
            for (var i = 0; i < myResult.length; i++) {
                db.students.update (
                {
                    '_id' : myResult[i]['_id']
                },
                {
                    '$pull' :
                    {
                        'scores' :
                        {
                            'score' : myResult[i]['minHomework']
                        }
                    }
                } )
            }

            // Gives Syntax Error
            for result in myResult:
                db.students.update (
                {
                    '_id' : result['_id']
                },
                {
                    '$pull' :
                    {
                        'scores' :
                        {
                            'score' : result['minHomework']
                        }
                    }
                } )


Week 4:
    Homework 4.1:
        db.products.insertMany(
        [
            {
                "sku" : "abc",
                "price" : 100,
                "description" : "this is a nice book",
                "category" : "drama",
                "brand" : "reebok",
                "reviews" : 
                {
                    "author" : "def"
                }
            },
            {
                "sku" : "qwe",
                "price" : 120,
                "description" : "this is a good book",
                "category" : "drama",
                "brand" : "reebok",
                "reviews" : 
                {
                    "author" : "def"
                }
            },
            {
                "sku" : "zxc",
                "price" : 40,
                "description" : "this is a great book",
                "category" : "drama",
                "brand" : "GE",
                "reviews" : 
                {
                    "author" : "poi"
                }
            }
        ]);

        db.products.createIndex({"sku":1}, {unique:true})
        db.products.createIndex({"price" : -1})
        db.products.createIndex({"description" : 1})
        db.products.createIndex({"category" : 1, "brand" : 1})
        db.products.createIndex({"reviews.author" : 1})

    
        db.products.find({'brand' : "GE"})
        db.products.find({'brand' : "GE"}).sort( {price : 1} )
        db.products.find( { $and : [{ price : { $gt : 30} }, {price : { $lt : 50} } ] } ).sort( { brand : 1} )
        db.products.find({brand : 'GE'}).sort( { category : 1, brand : -1} )
    

        db.products.explain().find({'brand' : "GE"})
        db.products.explain().find({'brand' : "GE"}).sort( {price : 1} )
        db.products.explain().find( { $and : [{ price : { $gt : 30} }, {price : { $lt : 50} } ] } ).sort( { brand : 1} )
        db.products.explain().find({brand : 'GE'}).sort( { category : 1, brand : -1} )

    SOLUTION:
        db.products.explain().find({'brand' : "GE"}).sort( {price : 1} )
        db.products.explain().find( { $and : [{ price : { $gt : 30} }, {price : { $lt : 50} } ] } ).sort( { brand : 1} )

    Homework 4.2:
        Suppose you have a collection called tweets whose documents contain information about the created_at time of the tweet and the user's followers_count at the time they issued the tweet. What can you infer from the following explain output?

        > db.tweets.explain("executionStats").find( { "user.followers_count" : { $gt : 1000 } } ).limit(10).skip(5000).sort( { created_at : 1 } )


    Homework 4.3:
        Make the following things faster by creating Indexes:
        1. Blog homepage that gets the most recent 10 blog posts and print them out
        2. Make the page that gets the most recent 10 blog posts WHEN ANY TAG IS CLICKED
        3. Blog Posts page that is referenced by Permalink. 
           It just brings up one post with all the comments

        - Queries are inside the code that produce the output
        - You don't need to write them. You can just look the code and try to make those
          queries faster
        - These queries should scan only the number of documents returned, NOT the entire
          collection

        > mongoimport --drop -d blog -c posts posts.json

    SOLUTION:
        > db.posts.createIndex({"permalink":1},{unique:true})
        > db.posts.createIndex({"date":-1})
        > db.posts.count({"tags":null})
        > db.posts.createIndex({"tags":1})

    Homework 4.4:
        > mongoimport --drop -d m101 -c profile sysprofile.json
        > mongo
        MongoDB Enterprise > use m101
        switched to db m101
        MongoDB Enterprise > show collections
        profile
        MongoDB Enterprise > db.profile.find().count()
        1515
        MongoDB Enterprise > db.profile.find({"ns" : "school2.students"}).count()
        100

        MongoDB Enterprise > db.profile.find({"ns" : "school2.students"}).sort({"millis":-1}).limit(1).pretty()
        {
                "_id" : ObjectId("5821e6b72155eadffbbb7ce6"),
                "ts" : ISODate("2012-11-20T20:09:49.862Z"),
                "op" : "query",
                "ns" : "school2.students",
                "query" : {
                        "student_id" : 80
                },
                "ntoreturn" : 0,
                "ntoskip" : 0,
                "nscanned" : 10000000,
                "keyUpdates" : 0,
                "numYield" : 5,
                "lockStats" : {
                        "timeLockedMicros" : {
                                "r" : 19776550,
                                "w" : 0
                        },
                        "timeAcquiringMicros" : {
                                "r" : 4134067,
                                "w" : 5
                        }
                },
                "nreturned" : 10,
                "responseLength" : 2350,
                "millis" : 15820,
                "client" : "127.0.0.1",
                "user" : ""
        }


Week 5:
    Homework 5.1:
        
        db.posts.aggregate([
            {
                $unwind: "$comments"
            },
            {
                $group:
                {
                    "_id" : "$comments.author",
                    "count" : {$sum:1}
                }
            },
            {
                $sort:
                {
                    "count" : -1
                }
            }
        ])

        SOLUTION:
        { "_id" : "Elizabet Kleine", "count" : 503 }

    Homework 5.2:
        HINT 1:
            db.zips.aggregate([
                {
                    $group:
                    {
                        "_id" : "$state",
                        "population" :
                        {
                            $sum : "$pop"
                        }
                    }
                },
                {
                    $sort : 
                    {
                        "state" : 1
                    }
                }
            ])

            { "_id" : "CA", "population" : 953386 }
            { "_id" : "CT", "population" : 661324 }
            { "_id" : "NJ", "population" : 847495 }
            { "_id" : "NY", "population" : 485267 }

        HINT 2:
            db.zips.aggregate([
                {
                    $match:
                    {
                        $or: [ {state : "CT"}, {state : "NJ"}]
                    }
                },
                {
                    $match:
                    {
                        "pop" : 
                        {
                            $gt : 25000
                        }
                    }
                },
                {
                    $group:
                    {
                        "_id" : "$state",
                        "population" :
                        {
                            $sum : "$pop"
                        }
                    }
                },
                {
                    $sort : 
                    {
                        "state" : 1
                    }
                }
            ])

            { "_id" : "CT", "population" : 360957 }
            { "_id" : "NJ", "population" : 439169 }


        HINT 3:
            db.zips.aggregate([
                {
                    $match:
                    {
                        $or: [ {state : "CT"}, {state : "NJ"}]
                    }
                },
                {
                    $match:
                    {
                        "pop" : 
                        {
                            $gt : 25000
                        }
                    }
                },
                {
                    $group:
                    {
                        "_id" : "$state",
                        "population" :
                        {
                            $avg : "$pop"
                        }
                    }
                },
                {
                    $group:
                    {
                        "_id" : 1,
                        "average_pop" :
                        {
                            $avg : "$population"
                        }
                    }
                }
            ])

            { "_id" : 1, "average_pop" : 36346.558333333334 }

        HINT 4:
db.zips.aggregate([
    {
        $match:
        {
            $or: [ {state : "CT"}, {state : "NJ"}]
        }
    },
    {
        $group:
        {
            "_id" : "$city",
            "state" : 1,
            "sumPop" :
            {
                $sum : "$pop"
            }
        }
    },
    {
        $match:
        {
            "pop" : 
            {
                $gt : 25000
            }
        }
    },
    {
        $group:
        {
            "_id" : "$state",
            "population" :
            {
                $avg : "$pop"
            }
        }
    }
])


        FINAL SOLUTION:
            db.zips.aggregate([
                {
                    $match:
                    {
                        $or: [ {state : "CT"}, {state : "NJ"}]
                    }
                },
                {
                    $group:
                    {
                        "_id" :
                        {
                            "city" : "$city",
                            "state" : "$state"
                        },
                        "sumPop" :
                        {
                            $sum : "$pop"
                        }
                    }
                },
                {
                    $match:
                    {
                        "sumPop" : 
                        {
                            $gt : 25000
                        }
                    }
                },
                {
                    $group:
                    {
                        "_id" : "$_id.state",
                        "population" :
                        {
                            $avg : "$sumPop"
                        }
                    }
                },
                {
                    $group:
                    {
                        "_id" : null,
                        "avgPop" :
                        {
                            $avg : "$population"
                        }
                    }
                }
            ])

            { "_id" : null, "avgPop" : 38176.63636363637 }

        FINAL SOLUTION 2:
            db.zips.aggregate([
                /* Get only docs that match CA and NY */
                {
                    $match:
                    {
                        $or: [ {state : "CA"}, {state : "NY"}]
                    }
                },
                /* Group by all cities within a state. Also calculate the Population of a City */
                {
                    $group:
                    {
                        "_id" :
                        {
                            "city" : "$city",
                            "state" : "$state"
                        },
                        "sumPop" :
                        {
                            $sum : "$pop"
                        }
                    }
                },
                /* Filter only cities that have a population greater than 25000 */
                {
                    $match:
                    {
                        "sumPop" : 
                        {
                            $gt : 25000
                        }
                    }
                },
                /* Find the average popluation of boths state CA and NY separately */
                {
                    $group:
                    {
                        "_id" : "$_id.state",
                        "population" :
                        {
                            $avg : "$sumPop"
                        }
                    }
                },
                /* Do a combined average of both */
                {
                    $group:
                    {
                        "_id" : null,
                        "avgPop" :
                        {
                            $avg : "$population"
                        }
                    }
                }
            ])

            { "_id" : null, "avgPop" : 44327.92916666667 }

    Homework 5.3:
        HINT 1:
            MongoDB Enterprise > db.grades.aggregate([
            ...     /* Unwind by scores */
            ...     {
            ...         "$unwind" : "$scores"
            ...     },
            ...     {
            ...         $match:
            ...         {
            ...             "scores.type" :
            ...             { $ne : "quiz"}
            ...         }
            ...     },
            ...     /* Group by class id and student id. Find the avg score of each student in a class*/
            ...     {
            ...         $group:
            ...         {
            ...             "_id" :
            ...             {
            ...                 "class_id" : "$class_id",
            ...                 "student_id" : "$student_id"
            ...             },
            ...             "avgStudentScore" :
            ...             {
            ...                 $avg : "$scores.score"
            ...             }
            ...         }
            ...     },
            ...     {
            ...         $sort :
            ...         {
            ...             "_id.class_id" : 1,
            ...             "_id.student_id" : 1
            ...         }
            ...     }])

        HINT 2:
            Find the Class which has the best student score

            /* Find the class id whose student has got the best score i.e. maximum score */
            db.grades.aggregate([
                /* Unwind by scores */
                {
                    "$unwind" : "$scores"
                },
                {
                    $match:
                    {
                        "scores.type" :
                        { $ne : "quiz"}
                    }
                },
                /* Group by class id and student id. Find the avg score of each student in a class*/
                {
                    $group:
                    {
                        "_id" :
                        {
                            "class_id" : "$class_id",
                            "student_id" : "$student_id"
                        },
                        "avgStudentScore" :
                        {
                            $avg : "$scores.score"
                        }
                    }
                },
                /* Sort by avg student score. This way you can use $first to get student id as well */
                /* http://stackoverflow.com/questions/40579182/how-to-display-additional-fields-in-mongodbs-group-aggregation-query */
                {
                    $sort :
                    {
                        "_id.class_id" : 1,
                        "avgStudentScore" : -1
                    }
                },
                /* Group by class id and select the max student score in each class*/
                {
                    $group:
                    {
                        "_id" : 
                        {
                            "class_id" : "$_id.class_id",
                        },
                        "student_id" : 
                        {
                            $first : "$_id.student_id"
                        },
                        "maxStudentScore" :
                        {
                            $max : "$avgStudentScore"
                        },
                    }
                },
                /* Sort the classes by max student score */
                {
                    $sort:
                    {
                        "maxStudentScore" : -1
                    }
                },
                /* We are interested only in the top result. So limit to 1 */
                {
                    $limit : 1
                }
            ])

        FINAL SOLUTION:
            db.grades.aggregate([
                /* Unwind by scores */
                {
                    "$unwind" : "$scores"
                },
                {
                    $match:
                    {
                        "scores.type" :
                        { $ne : "quiz"}
                    }
                },
                /* Group by class id and student id. Find the avg score of each student in a class*/
                {
                    $group:
                    {
                        "_id" :
                        {
                            "class_id" : "$class_id",
                            "student_id" : "$student_id"
                        },
                        "avgStudentScore" :
                        {
                            $avg : "$scores.score"
                        }
                    }
                },
                /* Group by class id and get the class average score*/
                {
                    $group:
                    {
                        "_id" : 
                        {
                            "class_id" : "$_id.class_id",
                        },
                        "classAvgScore" :
                        {
                            $avg : "$avgStudentScore"
                        },
                    }
                },
                /* Sort the classes by max student score */
                {
                    $sort:
                    {
                        "classAvgScore" : -1
                    }
                },
                /* We are interested only in the top result. So limit to 1 */
                {
                    $limit : 1
                }
            ])

            { "_id" : { "class_id" : 1 }, "classAvgScore" : 64.50642324269175 }

    Homework 5.4:
        db.zips.aggregate([
            /* Get the first character of each city by using PROJECT*/
            {
                $project:
                {
                    cityFirstChar:
                    {
                        $substr : ["$city",0,1]
                    },
                    city : 1,
                    pop : 1
                }
            },
            /* Filter only documents whose first character is a digit */
            {
                $match:
                {
                    "cityFirstChar" :
                    { $in : ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"] }
                }
            },
            /* Count the population of all people by passing NULL for id */
            {
                $group:
                {
                    "_id" : null,
                    "totalPopulation" :
                    {
                        $sum : "$pop"
                    }
                }
            }
        ])

        { "_id" : null, "totalPopulation" : 298015 }

FINAL EXAM
    Question 1:
        mongorestore --port <port number> -d enron -c messages <path to BSON file>

        https://docs.mongodb.com/manual/tutorial/query-documents/#match-an-array-element
        db.messages.count(
        {
            $and : [
            {
                "headers.From" : "andrew.fastow@enron.com"
            },
            {
                "headers.To" : "jeff.skilling@enron.com"
            } ]
        })

        ANS: 3

    Question 2:
    http://stackoverflow.com/questions/18804404/mongodb-unwind-array-using-aggregation-and-remove-duplicates
    http://stackoverflow.com/questions/27229662/mongodb-aggregation-to-count-element-pairs-and-individual-elements
    Sample Data To Try My Logic:
        db.hw2.insertMany(
        [
            {
                "from" : "a",
                "to" : ["c", "q", "r", "u"]
            },
            {
                "from" : "b",
                "to" : ["q", "w", "q", "q"]
            },
            {
                "from" : "a",
                "to" : ["c", "q", "r", "u"]
            },
            {
                "from" : "b",
                "to" : ["w", "t", "r", "u"]
            },
            {
                "from" : "b",
                "to" : ["w", "i", "o", "p"]
            }
        ])

        db.hw2.aggregate([
            {
                $unwind : '$to'
            },
            {
                $group :
                {
                    '_id' : '$_id',
                    'ToId' : 
                    {
                        $addToSet : '$to'
                    },
                    'FromId' :
                    {
                        $first : '$from'
                    }
                }
            },
            {
                $unwind : '$ToId'
            },
            {
                $group:
                {
                    '_id' : 
                    {
                        "from" : "$FromId",
                        "to" : "$ToId"
                    },
                    'count' :
                    {
                        $sum : 1
                    }
                }
            },
            {
                $sort : 
                {
                    "count" : -1
                }
            },
            {
                $limit : 1
            }
        ])


        db.messages.aggregate([
            {
                $unwind : '$headers.To'
            },
            {
                $group :
                {
                    '_id' : '$headers.Message-ID',
                    'ToId' : 
                    {
                        $addToSet : '$headers.To'
                    },
                    'FromId' :
                    {
                        $first : '$headers.From'
                    }
                }
            },
            {
                $unwind : '$ToId'
            },
            {
                $group:
                {
                    '_id' : 
                    {
                        "from" : "$FromId",
                        "to" : "$ToId"
                    },
                    'count' :
                    {
                        $sum : 1
                    }
                }
            },
            {
                $sort : 
                {
                    "count" : -1
                }
            },
            {
                $limit : 1
            }
        ])

        { "_id" : { "from" : "susan.mara@enron.com", "to" : "jeff.dasovich@enron.com" }, "count" : 750 }

    Question 3:
    https://docs.mongodb.com/manual/reference/operator/update/push/
        db.messages.find(
        {
            "headers.Message-ID" : "<8147308.1075851042335.JavaMail.evans@thyme>"
        }).pretty()

        db.messages.update(
        {
            "headers.Message-ID" : "<8147308.1075851042335.JavaMail.evans@thyme>"
        },
        {
            $push : 
            { 
                "headers.To" : "mrpotatohead@mongodb.com"
            }
        })
        WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

    Question 4:

    Question 5:
        db.stuff.insertMany(
        [
            {
                "a" : 10000,
                "b" : 1000,
                "c" : 500
            },
            {
                "a" : 11000,
                "b" : 1200,
                "c" : 520
            },
            {
                "a" : 1000,
                "b" : 10000,
                "c" : 500
            },
            {
                "a" : 1000,
                "b" : 15000,
                "c" : 600
            },
            {
                "a" : 80000,
                "b" : 90000,
                "c" : 700
            },
            {
                "a" : 50000,
                "b" : 2000,
                "c" : 800
            },
            {
                "a" : 200,
                "b" : 90000,
                "c" : 900
            },
            {
                "a" : 80000,
                "b" : 2000,
                "c" : 5000
            },
            {
                "a" : 100,
                "b" : 15600,
                "c" : 100
            },
            {
                "a" : 10000,
                "b" : 134000,
                "c" : 900
            },
            {
                "a" : 4000,
                "b" : 40000,
                "c" : 800
            },
        ])


        MongoDB Enterprise > db.stuff.find({'a':{'$lt':10000}, 'b':{'$gt': 5000}}, {'a':1, 'c':1}).sort({'c':-1})
        { "_id" : ObjectId("58353ad232f318614c6b5869"), "a" : 200, "c" : 900 }
        { "_id" : ObjectId("58353ad232f318614c6b586d"), "a" : 4000, "c" : 800 }
        { "_id" : ObjectId("58353ad232f318614c6b5866"), "a" : 1000, "c" : 600 }
        { "_id" : ObjectId("58353ad232f318614c6b5865"), "a" : 1000, "c" : 500 }
        { "_id" : ObjectId("58353ad232f318614c6b586b"), "a" : 100, "c" : 100 }
        MongoDB Enterprise > db.stuff.getIndexes()
        [
                {
                        "v" : 1,
                        "key" : {
                                "_id" : 1
                        },
                        "name" : "_id_",
                        "ns" : "sampFinal.stuff"
                }
        ]

        db.stuff.createIndex ( { a:1, b:1 } )
        db.stuff.createIndex ( { a:1, c:1 } )
        db.stuff.createIndex ( { c:1 } )
        db.stuff.createIndex ( { a:1, b:1, c:-1 } )

        db.stuff.explain("allPlansExecution").find({'a':{'$lt':10000}, 'b':{'$gt': 5000}}, {'a':1, 'c':1}).sort({'c':-1})

    Question 6:
    http://dba.stackexchange.com/questions/84170/mongodb-insertion-speed
    https://groups.google.com/forum/#!topic/mongodb-user/0NtKoUn5Di4

    Question 7:
        1. Create Indexes
        2. Count images that has "sunrises" tag and make sure it is 49,887
        3. Remove images that are not part of any album
        4. Find the count of images that has "sunrises" tag

        db.images.createIndex( {tags:1 })
        db.albums.createIndex( {images:1 })

        vals = db.albums.find({}, {images: 1}).map(function(albums){return albums.images;})
        db.images.find({_id : {$nin : vals}})

        vals = db.albums.find({}, {images: 1}).map(function(albums){return albums.images;})
        cursor = db.images.find({_id : {$nin : vals}});
        while(cursor.hasNext()){
            printjson(cursor.next());
        }

        vals = db.albums.aggregate( [  { '$unwind': '$images' } ] ).map(function(albums){return albums.images;})
        cursor = db.images.find({_id : {$nin : vals}});
        while(cursor.hasNext()){
            printjson(cursor.next());
        }

        > mongo finalQ7Images --quiet script.js > result.txt

    Question 8:

    Question 9:

    Question 10:
        var exp = db.messages.explain('executionStats')


        exp.find( { 'headers.Date' : { '$gt' : new Date(2001,3,1) } }, { 'headers.From' : 1, '_id' : 0 } ).sort( { 'headers.From' : 1 } )

        {
          "queryPlanner" : {
            "plannerVersion" : 1,
            "namespace" : "enron.messages",
            "indexFilterSet" : false,
            "parsedQuery" : {
              "headers.Date" : {
                "$gt" : ISODate("2001-04-01T05:00:00Z")
              }
            },
            "winningPlan" : {
              "stage" : "PROJECTION",
              "transformBy" : {
                "headers.From" : 1,
                "_id" : 0
              },
              "inputStage" : {
                "stage" : "FETCH",
                "filter" : {
                  "headers.Date" : {
                    "$gt" : ISODate("2001-04-01T05:00:00Z")
                  }
                },
                "inputStage" : {
                  "stage" : "IXSCAN",
                  "keyPattern" : {
                    "headers.From" : 1
                  },
                  "indexName" : "headers.From_1",
                  "isMultiKey" : false,
                  "direction" : "forward",
                  "indexBounds" : {
                    "headers.From" : [
                      "[MinKey, MaxKey]"
                    ]
                  }
                }
              }
            },
            "rejectedPlans" : [ ]
          },
          "executionStats" : {
            "executionSuccess" : true,
            "nReturned" : 83057,
            "executionTimeMillis" : 726,
            "totalKeysExamined" : 120477,
            "totalDocsExamined" : 120477,
            "executionStages" : {
              "stage" : "PROJECTION",
              "nReturned" : 83057,
              "executionTimeMillisEstimate" : 690,
              "works" : 120478,
              "advanced" : 83057,
              "needTime" : 37420,
              "needFetch" : 0,
              "saveState" : 941,
              "restoreState" : 941,
              "isEOF" : 1,
              "invalidates" : 0,
              "transformBy" : {
                "headers.From" : 1,
                "_id" : 0
              },
              "inputStage" : {
                "stage" : "FETCH",
                "filter" : {
                  "headers.Date" : {
                    "$gt" : ISODate("2001-04-01T05:00:00Z")
                  }
                },
                "nReturned" : 83057,
                "executionTimeMillisEstimate" : 350,
                "works" : 120478,
                "advanced" : 83057,
                "needTime" : 37420,
                "needFetch" : 0,
                "saveState" : 941,
                "restoreState" : 941,
                "isEOF" : 1,
                "invalidates" : 0,
                "docsExamined" : 120477,
                "alreadyHasObj" : 0,
                "inputStage" : {
                  "stage" : "IXSCAN",
                  "nReturned" : 120477,
                  "executionTimeMillisEstimate" : 60,
                  "works" : 120477,
                  "advanced" : 120477,
                  "needTime" : 0,
                  "needFetch" : 0,
                  "saveState" : 941,
                  "restoreState" : 941,
                  "isEOF" : 1,
                  "invalidates" : 0,
                  "keyPattern" : {
                    "headers.From" : 1
                  },
                  "indexName" : "headers.From_1",
                  "isMultiKey" : false,
                  "direction" : "forward",
                  "indexBounds" : {
                    "headers.From" : [
                      "[MinKey, MaxKey]"
                    ]
                  },
                  "keysExamined" : 120477,
                  "dupsTested" : 0,
                  "dupsDropped" : 0,
                  "seenInvalidated" : 0,
                  "matchTested" : 0
                }
              }
            }
          },
          "serverInfo" : {
            "host" : "dpercy-mac-air.local",
            "port" : 27017,
            "version" : "3.0.1",
            "gitVersion" : "534b5a3f9d10f00cd27737fbcd951032248b5952"
          },
          "ok" : 1
        }

