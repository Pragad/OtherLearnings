BASIC SHELL SCRIPTING STUFF
0. UNIX a multi-user OS
1. Different types of shell and differences
2. BASH Shortcuts
3. Pushd Popd and Dirs
4. df vs du
5. Find top running processes
6. Get System identification info
7. Hard Link vs Soft Link
8. Chmod
9. CHOWN
10. $#
11. $* and $@
12. Explain about 's' permission bit in a file?
13. How will you find the 99th line of a file using only tail and head command?
14. Create a directory such that anyone in the group can create a file and access any person’s file in it but none should be able to delete a file other than the one created by himself
--------------------------------------------------------------------------------------------
Quick Guide to GREP
1. Basic GREP
--------------------------------------------------------------------------------------------
Quick Guide to FIND
1. Basic FIND
2. Basic Head with Find
--------------------------------------------------------------------------------------------
Quick Guide to CUT
1.
Few Examples of using CUT
--------------------------------------------------------------------------------------------
Quick Guide to AWK and SED
1a. What is the difference between awk and sed ?
1b. What kind of application are best use cases for sed and awk tools ?
2. Awk Shortucts
3. Sum of a text file that has only numbers:
--------------------------------------------------------------------------------------------
BASIC SHELL SCRIPTING STUFF
0.
UNIX a multi-user OS
    It means that more than one user can be operating the computer at the same time.
    While your computer will only have one keyboard and monitor, it can still be used by more than one user.
    For example, if your computer is attached to a network, or the Internet, remote users can log in via telnet or ssh (secure shell) and operate the computer.

1.
Different types of shell and differences

2.
BASH Shortcuts
    1. End of line          : ctrl + e
    2. Beginning of line    : ctrl + a
    3. Move by a char       : ctrl + f, ctrl + b
    4. Move by a word       : alt + f, alt + b
    5. Delete a character   : ctrl + d

    Ctrl + a – go to the start of the command line
    Ctrl + e – go to the end of the command line
    Ctrl + k – delete from cursor to the end of the command line
    Ctrl + u – delete from cursor to the start of the command line
    Ctrl + w – delete from cursor to start of word (i.e. delete backwards one word)
    Ctrl + y – paste word or text that was cut using one of the deletion shortcuts (such as the one above) after the cursor
    Ctrl + xx – move between start of command line and current cursor position (and back again)

    Alt + b – move backward one word (or go to start of word the cursor is currently on)
    Alt + f – move forward one word (or go to end of word the cursor is currently on)
    Alt + d – delete to end of word starting at cursor (whole word if cursor is at the beginning of word)
    Alt + c – capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word)
    Alt + u – make uppercase from cursor to end of word
    Alt + l – make lowercase from cursor to end of word
    Alt + t – swap current word with previous
    Ctrl + f – move forward one character
    Ctrl + b – move backward one character
    Ctrl + d – delete character under the cursor
    Ctrl + h – delete character before the cursor
    Ctrl + t – swap character under cursor with the previous one


    Ctrl + r – search the history backwards
    Ctrl + g – escape from history searching mode
    Ctrl + p – previous command in history (i.e. walk back through the command history)
    Ctrl + n – next command in history (i.e. walk forward through the command history)
    Alt + . – use the last word of the previous command

    !! - run last command
    !blah – run the most recent command that starts with ‘blah’ (e.g. !ls)
    !blah:p – print out the command that !blah would run (also adds it as the latest command in the command history)
    !$ – the last word of the previous command (same as Alt + .)
    !$:p – print out the word that !$ would substitute
    !* – the previous command except for the last word (e.g. if you type ‘find some_file.txt /‘, then !* would give you ‘find some_file.txt‘)
    !*:p – print out what !* would substitute

3.
Pushd Popd and Dirs
http://unix.stackexchange.com/questions/77077/how-do-i-use-pushd-and-popd-commands
    $ pushd dir1
    ~/somedir/dir1 ~/somedir
    $ dirs
    ~/somedir/dir1 ~/somedir
    dirs -v
    cd ~4

4.
df vs du
http://serverfault.com/questions/57098/du-vs-df-difference
    df -h | grep pragadhe
    du -h file_name

5.
Find top running processes
        top
    The top program provides a dynamic real-time view of a running system.
    It can display system summary information, as well as a list of processes or threads currently being managed by the kernel

6.
Get System identification info
        uname -a

7.
Hard Link vs Soft Link

Hard Link vs Soft Link
    http://stackoverflow.com/questions/185899/what-is-the-difference-between-a-symbolic-link-and-a-hard-link

    Underneath the file system files are represented by inodes (or is it multiple inodes not sure)

    A file in the file system is basically a link to an inode.
    A hard link then just creates another file with a link to the same underlying inode.

    When you delete a file it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.

    A symbolic link is a link to another name in the file system.

    IMP:
    - Once a hard link has been made the link is to the inode.
    - deleting renaming or moving the original file will not affect the hard link as it links to the underlying inode.
    - Any changes to the data on the inode is reflected in all files that refer to that inode.

    NOTE:
    Hard links are only valid within the same File System.
    Symbolic links can span file systems as they are simply the name of another file.

    Create two files:
        $ touch blah1; touch blah2

    Enter some Data into them:
        $ echo "Cat" > blah1
        $ echo "Dog" > blah2

    And as expected:
        $cat blah1; cat blah2
        Cat
        Dog

    Let's create hard and soft links:
        $ ln blah1 blah1-hard
        $ ln -s blah2 blah2-soft

    Let's see what just happened:
        $ ls -l

        blah1
        blah1-hard
        blah2
        blah2-soft -> blah2

    Changing the name of blah1 does not matter:
        $ mv blah1 blah1-new
        $ cat blah1-hard
        Cat

    blah1-hard points to the inode, the contents, of the file - that wasn't changed.
        $ mv blah2 blah2-new
        $ ls blah2-soft
        blah2-soft
        $ cat blah2-soft  
        cat: blah2-soft: No such file or directory

    The contents of the file could not be found because the soft link points to the name, that was changed, and not to the contents.
    Likewise, If blah1 is deleted, blah1-hard still holds the contents; if blah2 is deleted, blah2-soft is just a link to a non-existing file.

8.
Chmod
http://www.unixtutorial.org/2014/07/difference-between-chmod-and-chown/
http://linuxcommand.org/lts0070.php

    IMP:
    Unix allows multiple users to simultaneously work on a machine


    - Changes the READ, WRITE, Execute permissions on a file for
        i. User who owns the file
        ii. Group that belongs to the same group as user
        iii. Everyone else

    - Can be modified using numbers or characters
        1 - execute (x)
        2 - write (w)
        4 - read (r)

        u - user
        g - group
        o - others

    EXAMPLE 1:
    $ chmod 644 a.txt
    $ chmod u+rw,go+r a.txt
        - RW for user; 
        - R for group
        - R for everyone

    EXAMPLE 2:
    $ chmod 755 a.txt
    $ chmod u+rwx,go+rx a.txt

    EXAMPLE 3:
    - chmod +x a.txt
        - ADDS (x) permission to everyone. If none is specified, it adds for everyone
            
9
CHOWN
    FORMAT
    chown [-args] user_name:group file_directory

    Eg:
    $ chown -R pragad:netapp a.txt

10.
$#
http://career.guru99.com/shell-scripting-interview-questions/
    Shows the count of the arguments passed to the script.

11.
$* and $@
    $@ treats each quoted arguments as separate arguments 
    $* will consider the entire set of positional parameters as a single string.

12.
Explain about 's' permission bit in a file?

    's' bit is called 'set user id' (SUID) bit.

    's' bit on a file causes the process to have the privileges of the owner of the file during the instance of the program.

    Eg: Executing 'passwd' command to change current password causes the user to writes its new password to shadow file even though it has 'root' as its owner.

13.
How will you find the 99th line of a file using only tail and head command?

    tail +99 file1|head -1

14.
Create a directory such that anyone in the group can create a file and access any person’s file in it but none should be able to delete a file other than the one created by himself

    USE 't' sticky bit

    mkdir direc1
    chmod g+wx direc1
    chmod +t direc1

--------------------------------------------------------------------------------------------
Quick Guide to GREP
1. Basic GREP
    grep -ir "fleshscore" .
    grep -r -i "split" --include \*.h --include \*.cpp . | more

    Grep whole words:
        grep -wir "split" . --include \*.h --include \*.cpp . | more
        grep -ir "split" . --include \*.h --include \*.cpp . | more

    Grep Multiple Words in Same line
        grep -r -i "comment" --include \*.h --include \*.cpp . | grep -i "print"

    Grep surrounding lines
        For BSD or GNU grep you can use -B num to set how many lines before the match and -A num for the number of lines after the match.
            grep -B 3 -A 2 foo README.txt

        If you want the same number of lines before and after you can use -C num.
        This will show 3 lines before and 3 lines after.
            grep -C 3 foo README.txt


--------------------------------------------------------------------------------------------
Quick Guide to FIND
1. Basic FIND
    find . -iname "*binary*"

2. Basic Head with Find
   Display the top 20 lines of all cpp files
    find . -name '*.cpp' -exec head 20 {} \;

---------------------------------------------------------------------------------------------
Quick Guide to CUT
1.
Few Examples of using CUT
http://www.folkstalk.com/2012/02/cut-command-in-unix-linux-examples.html
    cut -c4 file.txt : just 4th char
    cut -c4,6 file.txt : 4th AND 6th char
    cut -c4-7 file.txt : 4th TO 7th char
    cut -c-6 file.txt  : Prints first SIX characters
    cut -c10- file.txt : Prints characters from TENTH position to the end.
    cut -d' ' -f2 file.txt        : Prints SECOND field ('f2') of each line that is separated by SPACE
    cut -d' ' -f2,3 file.txt      : Prints SECOND and THIRD filed of each line that is separated by SPACE
    cut -d' ' -f1-3 file.txt
    cut -d' ' -f-3 file.txt       : Prints FIRST THREE fileds
    cut -d' ' -f2- file.txt       : Prints from SECOND field till the end
--------------------------------------------------------------------------------------------
Quick Guide to AWK and SED
http://www.hcs.harvard.edu/~dholland/computers/awk.html

1a.
What is the difference between awk and sed ?
http://stackoverflow.com/questions/1632113/what-is-the-difference-between-sed-and-awk

    Both are tools that transform text.
    BUT awk can do more things besides just manipulating text.
    Its a programming language by itself with most of the things you learn in programming, like arrays, loops, if/else flow control etc.
    You can "program" in sed as well, but you won't want to maintain the code written in it.

1b.
What kind of application are best use cases for sed and awk tools ?

    Conclusion: Use sed for very simple text parsing.
    Anything beyond that, awk is better.
    In fact, you can ditch sed altogether and just use awk.
    Since their functions overlap and awk can do more, just use awk.
    You will reduce your learning curve as well.

2.
Awk Shortucts
    awk "{ sum += $1 } END { print sum }" file

    awk "{ sum += $5 } END { print sum }" 4c_Inside_Encrypt.txt

    awk "BEGIN {max = 0} {if ($3>max) max=$3} END {print max}" 3a_Inside_Decrypt.txt

3.
Sum of a text file that has only numbers:
    cat sum | awk "{ sum+=$1} END {print sum}"

--------------------------------------------------------------------------------------------
